<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <!--Lable styles-->
    <Style x:Key="LabelGameSettingsStyle" TargetType="{x:Type Label}">
        <Setter Property="DockPanel.Dock" Value="Right" />
        <Setter Property="Margin" Value="20,0,20,0" />
        <Setter Property="Foreground" Value="Wheat" />
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Gputeks" />
        <Setter Property="FontSize" Value="25" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
    </Style>

    <Style x:Key="LabelRoundSettingsStyle" TargetType="{x:Type Label}">
        <Setter Property="DockPanel.Dock" Value="Right" />
        <Setter Property="Margin" Value="5,0" />
        <Setter Property="Foreground" Value="Wheat" />
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Gputeks" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
    </Style>

    <Style x:Key="LabelQuestionSettingsStyle" TargetType="{x:Type Label}">
        <Setter Property="DockPanel.Dock" Value="Right" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Foreground" Value="{DynamicResource DefaultedBorderBrush}" />
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Gputeks" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
    </Style>

    <Style x:Key="txtConnectWindowStyle" TargetType="{x:Type Label}">
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Gputeks" />
        <Setter Property="Foreground" Value="MistyRose" />
        <Setter Property="Margin" Value="10,-4" />
    </Style>

    <Style x:Key="lblTeamConnectedStyle" TargetType="{x:Type Label}">
        <Setter Property="Visibility" Value="Visible" />
        <Setter Property="Background" Value="{DynamicResource TeamConnectBrush}" />
        <Setter Property="Foreground" Value="#FF104F2C" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Gputeks" />
        <Setter Property="FontSize" Value="25" />
        <Setter Property="Margin" Value="2" />
    </Style>

    <Style x:Key="lblTeamDisconnectStyle" TargetType="{x:Type Label}">
        <Setter Property="Visibility" Value="Visible" />
        <Setter Property="Background" Value="{DynamicResource TeamDisconnectBrush}"/>
        <Setter Property="Foreground" Value="DarkRed" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Gputeks" />
        <Setter Property="FontSize" Value="25" />
        <Setter Property="Margin" Value="2" />
    </Style>

    <!--Button styles-->
	<Style x:Key="Button_rounded" TargetType="{x:Type Button}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Rectangle x:Name="rectangle" RadiusY="4" RadiusX="4" Stroke="#FF0A111D" StrokeThickness="0">
							<Rectangle.Fill>
								<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
									<GradientStop Color="#FF737A84" Offset="0"/>
									<GradientStop Color="#FF2D343D" Offset="1"/>
									<GradientStop Color="#FF323842" Offset="0.74"/>
								</LinearGradientBrush>
							</Rectangle.Fill>
						</Rectangle>
						<ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True"/>
						<Trigger Property="IsDefaulted" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="OpacityMask" TargetName="rectangle">
								<Setter.Value>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
										<GradientStop Color="Black" Offset="0"/>
										<GradientStop Color="White" Offset="1"/>
									</LinearGradientBrush>
								</Setter.Value>
							</Setter>
							<Setter Property="Cursor" TargetName="rectangle" Value="Hand"/>
							<Setter Property="Cursor" TargetName="contentPresenter" Value="Hand"/>
							<Setter Property="StrokeThickness" TargetName="rectangle" Value="0"/>
							<Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource buttonMainMenuMouseOverBrush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="OpacityMask" TargetName="rectangle">
								<Setter.Value>
									<LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
										<GradientStop Color="#FF303640" Offset="1"/>
										<GradientStop Color="White" Offset="0"/>
									</LinearGradientBrush>
								</Setter.Value>
							</Setter>
							<Setter Property="Cursor" TargetName="rectangle" Value="Hand"/>
							<Setter Property="StrokeThickness" TargetName="rectangle" Value="2"/>
							<Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource buttonMainMenuPressedBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False"/>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
        <Setter Property="Height" Value="70"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Bankir-Retro"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundMainButtonBrush}"/>
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
	</Style>
    
    <Style x:Key="ButtonFlat" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" Stroke="Black" Cursor="Hand" Fill="{DynamicResource ButtonFlatNormalBrush}"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Cursor="Hand"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="0.595"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ButtonFlatMouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource buttonFlatPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Bankir-Retro"/>
        <Setter Property="FontSize" Value="40"/>
        <Setter Property="Foreground" Value="#FFBBC1C3"/>
        <Setter Property="Height" Value="90"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
    </Style>

    <ControlTemplate x:Key="ButtonFlatControlTemplate" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid x:Name="grid" Background="{DynamicResource NormalBrush}">
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                <Setter Property="Background" TargetName="grid" Value="{DynamicResource MouseOverBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PressedBorderBrush}"/>
                <Setter Property="Background" TargetName="grid" Value="{DynamicResource PressedBrush}"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                <Setter Property="Background" TargetName="grid" Value="{DynamicResource BlueLightGradientBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="Background" TargetName="grid" Value="{DynamicResource BlueLightGradientBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="buttonGray" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image x:Name="Button_big_gray_1" Source="Images/Buttons/button_gray.png"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonRoundGameSettingsStyle" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="DockPanel.Dock" Value="Top" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Gputeks" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="30" />
    </Style>

    <Style x:Key="SystemButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="26" />
        <Setter Property="Margin" Value="10" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="/Brain-Ring;component/Images/Backgrounds/abstract-metallic-string.png"/>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- DataGrid styles-->
    <Style x:Key="DataGridStatisticsStyle" TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="RowBackground" Value="{x:Null}" />
        <Setter Property="HorizontalGridLinesBrush" Value="{x:Null}" />
        <Setter Property="VerticalGridLinesBrush" Value="{x:Null}" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="HeadersVisibility" Value="Column" />
        <Setter Property="Foreground" Value="SaddleBrown" />
    </Style>

    <!-- TextBlock Style -->
    <Style x:Key="StatisticsContentStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Ristretto Pro"/>
        <Setter Property="FontSize" Value="30"/>
        <Setter Property="Foreground" Value="#101A26"/>
        <Setter Property="Padding" Value="5"/>
    </Style>

    <Style x:Key="StatisticsHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5"/>
    </Style>
    
    <!--GroupBox Style-->
    <Style x:Key="SettingsHeaderStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="Foreground" Value="SeaShell"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Proun"/>
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="5" />
    </Style>
    
    <!--ComboBox styles-->
    <Style x:Key="ComboBoxGameSettingsStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="DockPanel.Dock" Value="Left" />
        <Setter Property="Margin" Value="10" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Gputeks"/>
    </Style>

    <Style x:Key="ComboBoxItemGameSettingsStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Gputeks" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>
    
    <Style x:Key="ComboBoxRoundSettingsStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="DockPanel.Dock" Value="Left" />
        <Setter Property="Margin" Value="5,3" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Gputeks"/>
    </Style>

    <Style x:Key="ComboBoxItemRoundSettingsStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Gputeks" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>

    <Style x:Key="ComboBoxQuestionSettingsStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="DockPanel.Dock" Value="Left" />
        <Setter Property="Margin" Value="5,2" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Gputeks"/>
    </Style>

    <Style x:Key="ComboBoxItemQuestionSettingsStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="FontFamily" Value="/Brain-Ring;component/Fonts/#Gputeks" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>

    
</ResourceDictionary>